import { NextRequest, NextResponse } from "next/server";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "8479841984:AAFUw7lBiJw2IpTbMbsyPEfvN2VrNCv7VmE";

export async function POST(req: NextRequest) {
  try {
    const update = await req.json();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (update.message && update.message.text) {
      const chatId = update.message.chat.id;
      const text = update.message.text;
      const user = update.message.from;
      
      if (text === '/start' || text.startsWith('/start auth')) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const userData = {
          id: `telegram_${user.id}`,
          telegramId: user.id,
          firstName: user.first_name,
          lastName: user.last_name,
          username: user.username,
          photoUrl: user.photo_url,
          authDate: Math.floor(Date.now() / 1000),
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stiger!*

–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! 

–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ Stiger.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üîã –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å power bank
üí≥ –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã  
üó∫Ô∏è –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏

–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç - –≤—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! ‚ö°

_–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!_`;

        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: welcomeMessage,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                {
                  text: "üåê –û—Ç–∫—Ä—ã—Ç—å Stiger",
                  url: "https://stiger.vercel.app"
                }
              ]]
            }
          }),
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –≤ –ø–∞–º—è—Ç–∏)
        global.telegramUsers = global.telegramUsers || new Map();
        global.telegramUsers.set(user.id, userData);
        
        return NextResponse.json({ ok: true });
      }
    }
    
    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Telegram webhook error:", error);
    return NextResponse.json({ ok: true });
  }
}
