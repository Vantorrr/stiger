"use client";
import AuthenticatedLayout from "@/components/AuthenticatedLayout";
import { useEffect, useState } from "react";
import Script from "next/script";

declare global {
  interface Window {
    cp: any;
  }
}

export default function PaymentPage() {
  const [savedCards, setSavedCards] = useState<Array<{id: string, mask: string, type: string, token?: string}>>([]);
  const [scriptLoaded, setScriptLoaded] = useState(false);
  const [loading, setLoading] = useState(false);
  const publicId = (process.env.NEXT_PUBLIC_CLOUDPAYMENTS_PUBLIC_ID as string) || "";
  
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–µ–¥–∏–Ω—ã–π –∫–ª—é—á)
    const cards = JSON.parse(localStorage.getItem("stiger_cards") || "[]");
    setSavedCards(cards);
  }, []);

  const saveCard = () => {
    console.log("saveCard called", { scriptLoaded, cp: window.cp });
    if (!publicId) {
      alert("–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NEXT_PUBLIC_CLOUDPAYMENTS_PUBLIC_ID –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π.");
      return;
    }

    if (!scriptLoaded || !window.cp) {
      alert("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞");
      return;
    }
    
    setLoading(true);
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º accountId –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let accountId: string | undefined = undefined;
    try {
      const userRaw = localStorage.getItem("stiger_user");
      if (userRaw) {
        const user = JSON.parse(userRaw);
        accountId = user?.id || user?.telegramId?.toString() || user?.phone || undefined;
      }
    } catch {}
    const origin = typeof window !== "undefined" ? window.location.origin : "";
    const widget = new window.cp.CloudPayments();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ auth —Å —Å—É–º–º–æ–π 1 —Ä—É–±–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
    widget.auth({
      publicId,
      description: "–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç—ã –∫ Stiger",
      amount: 1,
      currency: "RUB",
      requireConfirmation: false, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      saveCard: true, // –í–∞–∂–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
      accountId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã CloudPayments –Ω–µ –¥–µ–ª–∞–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç
      successUrl: "",
      failUrl: "",
    }, {
      onSuccess: (options: any) => {
        console.log("CloudPayments success:", options);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if (!options) {
          console.error("No options returned from CloudPayments");
          alert("–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã");
          setLoading(false);
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞—Ä—Ç—ã
        const newCard = {
          id: Date.now().toString(),
          mask: options.CardLastFour ? `‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ${options.CardLastFour}` : "‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢",
          type: options.CardType || "Unknown",
          token: options.Token || options.RebillId, // –ò–Ω–æ–≥–¥–∞ —Ç–æ–∫–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ RebillId
          transactionId: options.TransactionId
        };
        
        console.log("Saving card:", newCard);
        
        const updated = [...savedCards, newCard];
        localStorage.setItem("stiger_cards", JSON.stringify(updated));
        setSavedCards(updated);
        
        setLoading(false);
        alert("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!");
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 —Ä—É–±–ª—å (–æ—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
        fetch("/api/cloudpayments/refund", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ transactionId: options.TransactionId })
        });
        
        // –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        setTimeout(() => {
          window.location.href = "/dashboard";
        }, 1000);
      },
      onFail: (reason: any, options: any) => {
        setLoading(false);
        alert(`–û—à–∏–±–∫–∞: ${reason}`);
      },
      onComplete: () => {
        setLoading(false);
      }
    });
  };

  const deleteCard = (id: string) => {
    const updated = savedCards.filter(card => card.id !== id);
    localStorage.setItem("stiger_cards", JSON.stringify(updated));
    setSavedCards(updated);
  };

  const detectCardType = (pan: string): string => {
    const firstDigit = pan[0];
    const firstTwo = pan.substring(0, 2);
    const firstFour = pan.substring(0, 4);
    
    if (firstDigit === "4") return "Visa";
    if (["51", "52", "53", "54", "55"].includes(firstTwo)) return "Mastercard";
    if (firstTwo === "22") return "–ú–ò–†";
    if (["34", "37"].includes(firstTwo)) return "AmEx";
    if (firstTwo === "62") return "UnionPay";
    if (["2200", "2201", "2202", "2203", "2204"].includes(firstFour)) return "–ú–ò–†";
    
    return "Unknown";
  };

  return (
    <>
      <Script 
        src="https://widget.cloudpayments.ru/bundles/cloudpayments.js"
        onLoad={() => setScriptLoaded(true)}
      />
      <AuthenticatedLayout>
        <div className="min-h-screen px-6 py-20">
          <div className="max-w-2xl mx-auto">
            <h1 className="text-3xl font-bold mb-8">
              <span className="gradient-text">–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</span>
            </h1>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å –∫–∞—Ä—Ç–∞–º–∏ */}
            <div className="glass-premium rounded-3xl p-8 animate-fade-in">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold">–ú–æ–∏ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</h2>
                <div className="text-4xl">üí≥</div>
              </div>
              
              {/* –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã */}
              {savedCards.length > 0 ? (
                <div className="space-y-3 mb-8">
                  {savedCards.map((card) => (
                    <div key={card.id} className="flex items-center justify-between p-4 rounded-xl bg-gray-50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-8 rounded bg-gradient-to-r from-gray-700 to-gray-900 flex items-center justify-center text-white text-xs font-bold">
                          {card.type}
                        </div>
                        <span className="font-mono font-medium">{card.mask}</span>
                      </div>
                      <button
                        onClick={() => deleteCard(card.id)}
                        className="text-red-500 hover:text-red-600 transition-colors p-2"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 mb-8">
                  <div className="text-6xl mb-4">üí≥</div>
                  <p className="text-gray-600 dark:text-gray-400">
                    –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
                  </p>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
              <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                  CloudPayments –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –°–ë–ü, Apple Pay, Google Pay –∏ –¥—Ä—É–≥–∏–µ
                </p>
                {!scriptLoaded && (
                  <div className="text-sm text-gray-500 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...</div>
                )}
                <button 
                  onClick={saveCard}
                  disabled={loading || !scriptLoaded}
                  className="w-full h-12 rounded-xl gradient-bg text-white font-semibold button-premium disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
                >
                  {loading ? (
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
                  ) : !scriptLoaded ? (
                    "–ó–∞–≥—Ä—É–∑–∫–∞..."
                  ) : (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                      –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                    </>
                  )}
                </button>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
            <div className="mt-6 p-4 rounded-2xl bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
              <div className="flex gap-3">
                <div className="text-blue-500 mt-0.5">
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="text-sm text-blue-800 dark:text-blue-200">
                  <p className="font-semibold mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π</p>
                  <p>–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI DSS. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </AuthenticatedLayout>
    </>
  );
}