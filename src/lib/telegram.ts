// Telegram Bot API –∫–ª–∏–µ–Ω—Ç
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  phone_number?: string;
}

export interface AuthCode {
  code: string;
  phone: string;
  telegramId?: number;
  expiresAt: Date;
  attempts: number;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
export async function sendTelegramAuthCode(telegramId: number, code: string, firstName: string): Promise<boolean> {
  try {
    const message = `üîê *–ö–æ–¥ –≤—Ö–æ–¥–∞ –≤ Stiger*

–ü—Ä–∏–≤–µ—Ç, ${firstName}!

–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: \`${code}\`

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
üîí –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥

_–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ._`;

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });

    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error('Failed to send Telegram message:', error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞—Ä–µ–Ω–¥–µ
export async function sendRentalNotification(telegramId: number, orderData: any): Promise<boolean> {
  try {
    const message = `‚úÖ *–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!*

üîã Power Bank –≤—ã–¥–∞–Ω –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: *${orderData.deviceName}*
üí∞ –°—É–º–º–∞: *${orderData.amount} ‚ÇΩ*
‚è∞ –í—Ä–µ–º—è: *${new Date().toLocaleString('ru-RU')}*

üìç –ê–¥—Ä–µ—Å: ${orderData.address}

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ`;

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: telegramId,
        text: message,
        parse_mode: 'Markdown',
        disable_web_page_preview: true,
      }),
    });

    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error('Failed to send rental notification:', error);
    return false;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
export function generateAuthCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
export function isCodeValid(authCode: AuthCode): boolean {
  return authCode.expiresAt > new Date() && authCode.attempts < 3;
}
